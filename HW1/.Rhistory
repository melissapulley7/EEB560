start=list(beta = start_params[1],
muh = start_params[2],
gammah = start_params[3]),
method="L-BFGS-B",
lower=c(0, 0, 0),
upper=c(Inf, Inf, Inf))
#best fit parameter estimates
fit0_SIR = coef(fit)
fit0_SIR
conf_intervals <- confint(fit)
conf_intervals
fit1 = mle2(minuslogl=nll,
start=list(beta = fit0_SIR[1],
muh = fit0_SIR[2],
gammah = fit0_SIR[3]),
method="L-BFGS-B",
lower=c(0, 0, 0),
upper=c(Inf, Inf, Inf))
#best fit parameter estimates
fit1_SIR = coef(fit)
fit1_SIR
conf_intervals <- confint(fit1)
conf_intervals
library(deSolve)
S0 = 46806000/10000 #estimated from Thailand data
I0 = 454/10000
R0 = 0
init_val = c(S0=S0, I0 = I0, R0=R0)
T=450  # approx length of original data
times = seq(0,T,len=1000)
SIR_params_paper = ode(init_val, times, SIR_model, params_paper)
SIR_params_mle = ode(init_val, times, SIR_model, fit0_SIR)
ggplot()  + geom_line(aes(x=days, y=cases, color="Data")) + geom_point(aes(x=days, y=cases, color="Data")) +
geom_line(aes(x=times,y=SIR_params_paper[,3], color='Paper Params')) +
geom_line(aes(x=times,y=SIR_params_mle[,3], color='MLE Params')) +
labs(title = "Monthly Incidence between January 1984 and March 1985") +
ylab("DHF cases (per thousand)") + xlab("days")
SIR_model2 = function(t,x,params){
# This is an SIR model to describe dengue dynamics among humans
# t: represents time.
# x: a vector holding the state variables in the order S, I, R
# params: a vector holding our parameters B_h, beta, mu_h, gamma_h
S = x[1] #num of susceptible humans
I = x[2] #num of infected humans
R = x[3] #num of recovered humans
H = S+I+R #total num of humans
beta <- params['beta'] # Human  transmission rate
muh <- 1/69 #human death rate
gammah = params['gammah'] #human recovery rate
dS = muh*H - beta*I/H*S - muh*S
dI = beta*I/H*S - gammah*I - muh*I
dR = gammah*I - muh*R
return(list(c(dS, dI, dR)))
}
set.seed(5)
nll2 = function(beta, gammah){
#Computing the negative log likelihood for the SIR model to estimate beta, muh, and gammah
#The function assumes each data point is normally distributed where the mean is the number of cases (from the Thailand data), and variance is 1
#First, we set initial conditions and parameters
times_short = dengue_df$days
params = c(beta = beta, muh = muh, gammah = gammah)
init_val = c(S0=46806000/10000 , I0 = 454/10000, R0=0)
sigma2 = 1
#Now we simulate the model, for the same number of data points as the original dataset, at the same times
dhf_res = as.data.frame(ode(func=SIR_model,
y=init_val,
times = times_short,
parms = params))
#Now we compute the negative likelihood
nll = -1*sum(dnorm(dengue_df$cases[1:15], mean =dhf_res$I0,log=TRUE))
return(nll)
}
knitr::opts_chunk$set(echo = TRUE)
# Estimated data
days = c(0.00, 33.33, 66.67, 100.00, 133.33, 166.67, 200.00, 233.33, 266.67, 300.00, 333.33, 366.67, 400.00, 433.33, 466.67)
cases = c(0.5, 0.5, 0.6, 1, 2.5, 8.5, 15, 13, 11, 8, 4.5, 2, 1.5, 1.4, 2.5)
dengue_df <- data.frame(days = days, cases = cases)
head(dengue_df)
library(ggplot2)
ggplot(dengue_df, aes(x=days, y=cases)) + geom_point() + geom_line() +
labs(title = "Monthly Incidence between January 1984 and March 1985") +
ylab("DHF cases (per thousand)") + xlab("days")
SIR_model = function(t,x,params){
# This is an SIR model to describe dengue dynamics among humans
# t: represents time.
# x: a vector holding the state variables in the order S, I, R
# params: a vector holding our parameters B_h, beta, mu_h, gamma_h
S = x[1] #num of susceptible humans
I = x[2] #num of infected humans
R = x[3] #num of recovered humans
H = S+I+R #total num of humans
beta <- params['beta'] # Human  transmission rate
muh <- params['muh'] #human death rate
gammah = params['gammah'] #human recovery rate
dS = muh*H - beta*I/H*S - muh*S
dI = beta*I/H*S - gammah*I - muh*I
dR = gammah*I - muh*R
return(list(c(dS, dI, dR)))
}
library(deSolve)
S0 = 46806000/10000
I0 = 454/10000
R0 = 0
params_paper = c(beta = 0.5718, muh = 1/(69), gammah = .5211)
init_val = c(S0=S0, I0 = I0, R0=R0)
T=450  # approx length of original data
times = seq(0,T,len=1000)
SIR_model_result = ode(init_val, times, SIR_model, params_paper)
ggplot()  + geom_line(aes(x=days, y=cases)) + geom_point(aes(x=days, y=cases)) +
geom_line(aes(x=times,y=SIR_model_result[,3], color='I')) +
labs(title = "Monthly Incidence between January 1984 and March 1985") +
ylab("DHF cases (per thousand)") + xlab("days")
set.seed(5)
nll = function(beta, muh, gammah){
#Computing the negative log likelihood for the SIR model to estimate beta, muh, and gammah
#The function assumes each data point is normally distributed where the mean is the number of cases (from the Thailand data), and variance is 1
#First, we set initial conditions and parameters
times_short = dengue_df$days
params = c(beta = beta, muh = muh, gammah = gammah)
init_val = c(S0=46806000/10000 , I0 = 454/10000, R0=0)
sigma2 = 1
#Now we simulate the model, for the same number of data points as the original dataset, at the same times
dhf_res = as.data.frame(ode(func=SIR_model,
y=init_val,
times = times_short,
parms = params))
#Now we compute the negative likelihood
nll = -1*sum(dnorm(dengue_df$cases[1:15], mean =dhf_res$I0,log=TRUE))
return(nll)
}
start_params = as.vector(params_paper)
start_params
nll_test1 = nll(start_params[1], start_params[2], start_params[3])
nll_test2 = nll(start_params[1]-0.1, start_params[2], start_params[3])
nll_test1
nll_test2
library(bbmle)
#install.packages(stats4)
#get mle estimates for my parameters
fit = mle2(minuslogl=nll,
start=list(beta = start_params[1],
muh = start_params[2],
gammah = start_params[3]),
method="L-BFGS-B",
lower=c(0, 0, 0),
upper=c(Inf, Inf, Inf))
#best fit parameter estimates
fit0_SIR = coef(fit)
fit0_SIR
conf_intervals <- confint(fit)
conf_intervals
fit1 = mle2(minuslogl=nll,
start=list(beta = fit0_SIR[1],
muh = fit0_SIR[2],
gammah = fit0_SIR[3]),
method="L-BFGS-B",
lower=c(0, 0, 0),
upper=c(Inf, Inf, Inf))
#best fit parameter estimates
fit1_SIR = coef(fit)
fit1_SIR
conf_intervals <- confint(fit1)
conf_intervals
library(deSolve)
S0 = 46806000/10000 #estimated from Thailand data
I0 = 454/10000
R0 = 0
init_val = c(S0=S0, I0 = I0, R0=R0)
T=450  # approx length of original data
times = seq(0,T,len=1000)
SIR_params_paper = ode(init_val, times, SIR_model, params_paper)
SIR_params_mle = ode(init_val, times, SIR_model, fit0_SIR)
ggplot()  + geom_line(aes(x=days, y=cases, color="Data")) + geom_point(aes(x=days, y=cases, color="Data")) +
geom_line(aes(x=times,y=SIR_params_paper[,3], color='Paper Params')) +
geom_line(aes(x=times,y=SIR_params_mle[,3], color='MLE Params')) +
labs(title = "Monthly Incidence between January 1984 and March 1985") +
ylab("DHF cases (per thousand)") + xlab("days")
SIR_model2 = function(t,x,params){
# This is an SIR model to describe dengue dynamics among humans
# t: represents time.
# x: a vector holding the state variables in the order S, I, R
# params: a vector holding our parameters B_h, beta, mu_h, gamma_h
S = x[1] #num of susceptible humans
I = x[2] #num of infected humans
R = x[3] #num of recovered humans
H = S+I+R #total num of humans
beta <- params['beta'] # Human  transmission rate
muh <- 1/69 #human death rate
gammah = params['gammah'] #human recovery rate
dS = muh*H - beta*I/H*S - muh*S
dI = beta*I/H*S - gammah*I - muh*I
dR = gammah*I - muh*R
return(list(c(dS, dI, dR)))
}
set.seed(5)
nll2 = function(beta, gammah){
#Computing the negative log likelihood for the SIR model to estimate beta, muh, and gammah
#The function assumes each data point is normally distributed where the mean is the number of cases (from the Thailand data), and variance is 1
#First, we set initial conditions and parameters
times_short = dengue_df$days
params = c(beta = beta, muh = muh, gammah = gammah)
init_val = c(S0=46806000/10000 , I0 = 454/10000, R0=0)
sigma2 = 1
#Now we simulate the model, for the same number of data points as the original dataset, at the same times
dhf_res = as.data.frame(ode(func=SIR_model2,
y=init_val,
times = times_short,
parms = params))
#Now we compute the negative likelihood
nll = -1*sum(dnorm(dengue_df$cases[1:15], mean =dhf_res$I0,log=TRUE))
return(nll)
}
start_params = as.vector(params_paper)
start_params
nll_test3 = nll2(start_params[1], start_params[3])
start_params = as.vector(params_paper)
start_params
nll_test3 = nll2(start_params[1], start_params[3])
start_params = as.vector(params_paper)
start_params
nll_test3 = nll2(start_params[1], start_params[3])
set.seed(5)
nll2 = function(beta, gammah){
#Computing the negative log likelihood for the SIR model to estimate beta, muh, and gammah
#The function assumes each data point is normally distributed where the mean is the number of cases (from the Thailand data), and variance is 1
#First, we set initial conditions and parameters
times_short = dengue_df$days
params = c(beta = beta, gammah = gammah)
init_val = c(S0=46806000/10000 , I0 = 454/10000, R0=0)
sigma2 = 1
#Now we simulate the model, for the same number of data points as the original dataset, at the same times
dhf_res = as.data.frame(ode(func=SIR_model2,
y=init_val,
times = times_short,
parms = params))
#Now we compute the negative likelihood
nll = -1*sum(dnorm(dengue_df$cases[1:15], mean =dhf_res$I0,log=TRUE))
return(nll)
}
start_params = as.vector(params_paper)
start_params
nll_test3 = nll2(start_params[1], start_params[3])
nll_test4 = nll2(start_params[1]-0.1, start_params[3])
nll_test3
nll_test4
fit2 = mle2(minuslogl=nll,
start=list(beta = start_params[1],
gammah = start_params[3]),
method="L-BFGS-B",
lower=c(0, 0),
upper=c(Inf, Inf))
fit2 = mle2(minuslogl=nll2,
start=list(beta = start_params[1],
gammah = start_params[3]),
method="L-BFGS-B",
lower=c(0, 0),
upper=c(Inf, Inf))
#best fit parameter estimates
fit2_SIR = coef(fit2)
fit2_SIR
conf_intervals2 <- confint(fit2)
conf_intervals2
knitr::opts_chunk$set(echo = TRUE)
read.csv('G:\My Drive\Courses\EEB 560') # if windows or
read.csv('G:\My Drive\Courses\EEB 560') # if windows or
read.csv("G:\My Drive\Courses\EEB 560") # if windows or
read.csv("G:\My_Drive\Courses\EEB 560") # if windows or
read.csv("C:\Users\mpulley\EEB560") # if windows or
read.csv('C:\Users\mpulley\EEB560') # if windows or
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
read.csv('C:/Users/mpulley/FiddlerCrabData.csv') # if windows or
?read.csv
CrabDat <- read.csv("~/projects/EEB411_560/L2/FiddlerCrabData.csv", header = TRUE)
CrabDat <- read.csv("~/projects/EEB411_560/L2/FiddlerCrabData.csv", header = TRUE)
CrabDat <- read.csv("~/projects/EEB411_560/L2/FiddlerCrabData.csv", header = TRUE)
CrabDat <- read.csv("~/projects/EEB411_560/L2/FiddlerCrabData.csv", header = TRUE)
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
read.csv('C:/Users/mpulley/FiddlerCrabData.csv') # if windows or
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
read.csv('~/FiddlerCrabData.csv') # if windows or
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
file=
read.csv("~/FiddlerCrabData.csv") # if windows or
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
file=
read.csv("/FiddlerCrabData.csv") # if windows or
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
file=2
#read.csv('~/EEB411_560/FiddlerCrabData.csv') # if mac
file=cd
read.csv("C:\Users\mpulley\EEB560") # if windows or
file = read.csv("C:\Users\mpulley\EEB560") # if windows or
read.csv('C:/Users/mpulley/FiddlerCrabData.csv') # if windows or
> getwd()
> getwd()
getwd()
CrabDat <- read.csv("C:/Users/mpulley/EEB560")
read.csv("C:/Users/mpulley/EEB560")
read.csv("FiddlerCrabData.csv")
CrabDat <- read.csv("FiddlerCrabData.csv")
print(CrabDat)
print(head(CrabDat)) #what is this?
summary(CrabDat)
dim(CrabDat)
nrow(CrabDat) # what is this? Is the name of the function intuitive?
names(CrabDat)
names(CrabDat)[4] # does it make sense to you?
names(CrabDat) # check the previous answer against this. Makes sense?
names(CrabDat)[4] <-air.temp  #previously air_temp in my example
names(CrabDat)[4] <-air.temp  #previously air_temp in my example
names(CrabDat)[4] <-air.temp  #previously air_temp in my example
names(CrabDat)[4] = air_temp  #previously air_temp in my example
names(CrabDat)[4] = "air_temp"  #previously air_temp in my example
#previously air_temp in my example
```
names(CrabDat)[4] = "air_temp"
names(CrabDat)[4]
CrabDat[6,3]
```{r}
CrabDat[6,3]
CrabDat[2,2]
CrabDat[head]
CrabDat(head)
head(Crabdat)
head(Crabdat)
CrabDat[2,2]
head(CrabDat)
CrabDat[2,]
c(1,2,4) # this prints 1, 2, and 4
CrabDat[c(1,2,4), 3] # note that c(1,2,4) is left of the comma
CrabDat[1:5, 3]
1:5
```{r eval=FALSE}
CrabDat[1:5, 3]
**Answer**: This code extracts the air temperature (column 3) from observations (rows) 1 through 5.
CrabDat$size # since ‘size’ is the name of the variable you want
CrabDat$size # since ‘size’ is the name of the variable you want
CrabDat$width # since ‘size’ is the name of the variable you want
CrabDat$width # since ‘size’ is the name of the variable you want
CrabDat$Width # since ‘size’ is the name of the variable you want
```{r eval=FALSE}
head(CrabDat)
names(CrabDat)[3]
names(CrabDat)[3]
knitr::opts_chunk$set(echo = TRUE)
getwd()
read.csv("FiddlerCrabData.csv")
CrabDat <- read.csv("FiddlerCrabData.csv")
CrabDat[6,3]
CrabDat[2,2] #Latitude of 2nd observation
CrabDat[3,] #all data from third observation
c(1,2,4) # this prints 1, 2, and 4
head(CrabDat)
CrabDat$Width[1:5]
\awesomebox[red]{2pt}{\faAnswer}{red}{Question! Why is there no comma within the square brackets [  ]? 1 pt. It's ok to ask us for hints!!!}
#summary(CrabDat) # is there more information now?
```
?hist
\awesomebox[red]{2pt}{\faAnswer}{red}{Question! Why is there no comma within the square brackets [  ]? 1 pt. It's ok to ask us for hints!!!}
### 3.3	Beginning to describe and visualize data
CrabDat$Width # since ‘size’ is the name of the variable you want
CrabDat$AirTemp[1:10]
summary(CrabDat)
CrabDat[c(1,2,4), 3] # note that c(1,2,4) is left of the comma
CrabDat$site <- as.factor(CrabDat$site)
CrabDat$Site <- as.factor(CrabDat$Site)
summary(CrabDat) # is there more information now?
table(CrabDat$Site)
hist(CrabDat$size) # what do you think of the distribution
hist(CrabDat$Size) # what do you think of the distribution
hist(CrabDat$Width) # what do you think of the distribution
?hist
hist(CrabDat$Width, breaks=x) # what do you think of the distribution
hist(CrabDat$Width, breaks=x) # what do you think of the distribution
hist(CrabDat$Width, breaks=x) # what do you think of the distribution
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
hist(CrabDat$Width, breaks=5) # what do you think of the distribution
hist(CrabDat$Width, breaks=2) # what do you think of the distribution
hist(CrabDat$Width, breaks=3) # what do you think of the distribution
hist(CrabDat$Width, breaks=4) # what do you think of the distribution
hist(CrabDat$Width, breaks=5) # what do you think of the distribution
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
**Answer**: I chose 10 breaks because I wanted the width of each box to represents the number of crabs to hold 1mm variation in size. Since there are 10 boxes between widths of 10mm and 20mm. One box contains the number of Crabs of width 10mm and 11mm.
Boxplot(size~Site, data=CrabDat) # what do you think?
Boxplot(Width~Site, data=CrabDat) # what do you think?
Boxplot(Width~Site, data=CrabDat) # what do you think?
boxplot(Width~Site, data=CrabDat) # what do you think?
?boxplot
?scatter
?dotplot
plot(CrabDat$Width,CrabDat$AirTemp)
plot(CrabDat$AirTemp,CrabDat$Width)
boxplot(CrabDat$AirTemp,CrabDat$Width)
boxplot(AirTemp~Width, data=CrabDat)
boxplot(Width~AirTemp, data=CrabDat)
knitr::opts_chunk$set(echo = TRUE)
load(ggplot2)
load(ggplot)
library(ggplot2)
library(ggplot2)
ggplot(data=CrabDat) +
```
?ggplot
ggplot(data=CrabDat, axes=(x=width, y=Site)
ggplot(data=CrabDat, axes=(x=width, y=Site) )
ggplot(data=CrabDat, axes=(x=Site, y=Width))
ggplot(data=CrabDat, axes=(x=Site, y=Width)) + ggpoint()
ggplot(data=CrabDat, axes=(x=Site y=Width)) + ggpoint()
ggplot(data=CrabDat, aes=(x=Site y=Width)) + ggpoint()
ggplot(data=CrabDat, aes=(x=Site y=Width)) + ggpoint()
ggplot(data=CrabDat, aes=(x=Site, y=Width)) + ggpoint()
ggplot(data=CrabDat, aes=(x=Site,y=Width)) + ggpoint()
ggplot(data=CrabDat, aes(x=Site,y=Width)) + ggpoint()
ggplot(data=CrabDat, aes(x=Site,y=Width))
ggplot(data=CrabDat, aes(x=Site,y=Width)) + geom_point()
ggplot(data=CrabDat, aes(x=Site,y=Width)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE)
ylab("Size of Crabs (mm)") + xlab(("Site")
library(ggplot2)
ggplot(data=CrabDat, aes(x=Site,y=Width)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
ggplot(data=CrabDat, aes(x=Site,y=Width)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site") +legend()
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=dose)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site") +legend()
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Size)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site") +legend()
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Size)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Size)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE) +  geom_jitter()
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="blue", outlier.shape=16,
outlier.size=2, notch=FALSE) +  geom_jitter()
?outlier.shape
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=15,
outlier.size=2, notch=FALSE) +  geom_jitter()
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=15,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
setwd("C:/Users/mpulley/EEB560")
CrabDat[10,]
CrabDat[10,4]
knitr::opts_chunk$set(echo = TRUE)
getwd()
read.csv("FiddlerCrabData.csv")
CrabDat <- read.csv("FiddlerCrabData.csv")
CrabDat[10,4]
CrabDat[2,2] #Latitude of 2nd observation
CrabDat[3,] #all data from third observation
c(1,2,4) # this prints 1, 2, and 4
CrabDat$AirTemp[1:10]
summary(CrabDat)
CrabDat$Site <- as.factor(CrabDat$Site)
summary(CrabDat) # is there more information now? Yes
table(CrabDat$Site)
hist(CrabDat$Width) # what do you think of the distribution
boxplot(Width~Site, data=CrabDat) # what do you think?
#plot(size~latitude, data=CrabDat) # what do you think?
plot(CrabDat$AirTemp,CrabDat$Width)
boxplot(Width~AirTemp, data=CrabDat)
library(ggplot2)
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=15,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
#hist(CrabDat$Width) # what do you think of the distribution
```
```{r}
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
and then run:
hist(CrabDat$Width, breaks=5) # what do you think of the distribution
View(SI_fd_result)
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
hist(CrabDat$Width, breaks=10) # what do you think of the distribution
**Answer**: I chose 10 breaks because I wanted to have a finer partition of the data so that I can see more detail at the center of the data.
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=15,
outlier.size=2, notch=TRUE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
ggplot(data=CrabDat, aes(x=Site,y=Width, fill=Site)) + geom_boxplot(outlier.colour="black", outlier.shape=15,
outlier.size=2, notch=FALSE) +
labs(title = "Sizes of Crabs by Site") +
ylab("Size of Crabs (mm)") + xlab("Site")
getwd()
read.csv("C:/Users/mpulley/EEB560//FiddlerCrabData.csv")
CrabDat <- read.csv("C:/Users/mpulley/EEB560//FiddlerCrabData.csv")
WD = getwd()
WD
read.csv("WD//FiddlerCrabData.csv")
read.csv("C:/Users/mpulley/EEB560//FiddlerCrabData.csv")
